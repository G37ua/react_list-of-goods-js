{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD","App","_useState","useState","_useState2","_slicedToArray","sortField","setSortField","_useState3","_useState4","reversed","setReversed","visibleGoods","goods","_ref","preparedGoods","_toConsumableArray","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","_jsxs","className","children","_jsx","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAMaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EACY,iBADZA,EAEI,SA4BH,IAAMC,EAAM,WACjB,IAAAC,EAAkCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAvCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,EAAgCL,oBAAS,GAAMM,EAAAJ,YAAAG,EAAA,GAAxCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAEtBG,EA7BR,SAA0BC,EAAKC,GAA4B,IAAxBR,EAASQ,EAATR,UAAWI,EAAQI,EAARJ,SACtCK,EAAaC,YAAOH,GAqB1B,OAnBIP,GACFS,EAAcE,MAAK,SAACC,EAAOC,GACzB,OAAQb,GACN,KAAKN,EACH,OAAOkB,EAAME,cAAcD,GAE7B,KAAKnB,EACH,OAAOkB,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,EAEb,IAGEX,GACFK,EAAcO,UAGTP,CACT,CAMuBQ,CACnBxB,EACA,CACEO,YACAI,aAIJ,OACEc,eAAA,OAAKC,UAAU,kBAAiBC,SAAA,CAC9BF,eAAA,OAAKC,UAAU,UAASC,SAAA,CACtBC,cAAA,UACEC,KAAK,SACLH,UAAWI,IACT,SACA,UACA,CAAE,WAAYvB,IAAcN,IAE9B8B,QAAS,kBAAMvB,EAAaP,EAA0B,EAAC0B,SACxD,wBAIDC,cAAA,UACEC,KAAK,SACLH,UAAWI,IACT,SACA,aACA,CAAE,WAAYvB,IAAcN,IAE9B8B,QAAS,kBAAMvB,EAAaP,EAAkB,EAAC0B,SAChD,mBAIDC,cAAA,UACEC,KAAK,SACLH,UAAWI,IACT,SACA,aACA,CAAE,YAAanB,IAEjBoB,QAAS,kBAAMnB,GAAaD,EAAS,EAACgB,SACvC,aAICpB,GAAaI,IACbiB,cAAA,UACEC,KAAK,SACLH,UAAU,4BACVK,QAAS,WACPnB,GAAY,GACZJ,EAAa,GACf,EAAEmB,SACH,aAMLC,cAAA,MAAAD,SACGd,EAAamB,KAAI,SAAAC,GAAI,OACpBL,cAAA,MAAI,UAAQ,OAAMD,SACfM,GADqBA,EAEnB,QAKf,ECxHAC,IAASC,OACPP,cAAC1B,EAAG,IACJkC,SAASC,eAAe,Q","file":"static/js/main.40258a28.chunk.js","sourcesContent":["import { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD = {\n  ALPHABETICALLY: 'alphabetically',\n  LENGTH: 'length',\n};\n\nfunction getPreparedGoods(goods, { sortField, reversed }) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD.ALPHABETICALLY:\n          return good1.localeCompare(good2);\n\n        case SORT_FIELD.LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [reversed, setReversed] = useState(false);\n\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    {\n      sortField,\n      reversed,\n    },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': sortField !== SORT_FIELD.ALPHABETICALLY },\n          )}\n          onClick={() => setSortField(SORT_FIELD.ALPHABETICALLY)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-success',\n            { 'is-light': sortField !== SORT_FIELD.LENGTH },\n          )}\n          onClick={() => setSortField(SORT_FIELD.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-warning',\n            { 'is-light': !reversed },\n          )}\n          onClick={() => setReversed(!reversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setReversed(false);\n              setSortField('');\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}